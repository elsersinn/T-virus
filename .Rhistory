g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "#009E73",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(n)))
g
lambda=0.2
n=1000
rex <- rexp(40*1000,lambda)
matr <- matrix(rex,1000)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "#009E73",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(n))))
g
lambda=0.2
n=1000000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "#009E73",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(n))))
g
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "#009E73",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(40))))
g
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "green",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(40))))
g
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "blue",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(40))))
g
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "blue",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(1000))))
g
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
g <- ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "blue",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(40))))
g
mean(app)
mean(app[,"x"])
1/lambda
sd(app[,"x"])
1/lambda/sqrt(40)
n <- 100; pvals <- seq(.1, .9, by = .05); nosim <- 1000
coverage2 <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage2)) + geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
ggplot(data.frame(pvals, coverage2), aes(x = pvals, y = coverage2)) + geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 100
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95)+ylim(0, 1.0)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 1000
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
rpois(nosim, lambda = lambda * t) /
t
lhats <- rexp(nosim, lambda = lambda) / t
rexp(nosim, lambda)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 1000
coverage <- sapply(lambdavals, function(lambda){
lhats <- rexp(nosim, lambda) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
lhats <- rexp(nosim, lambda) / t
lhats
lambdavals <- seq(0.005, 0.10, by = .01);
nosim <- 1000
t <- 40
coverage <- sapply(lambdavals, function(lambda){
lhats <- rexp(nosim, lambda) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < 1/lambda & ul > 1/lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
lhats <- rexp(nosim, lambda)
mean(lhats)
lhats/ t
nosim <- 2
lambda <- 0.2
rpois(nosim, lambda = lambda * t)
rpois(nosim, lambda = lambda * t) / t
sd(app$x)/sqrt(40)
lambda=0.2
lambda=0.2
n=1000
rex <- rexp(40*n,lambda)
matr <- matrix(rex,n)
app <- apply (matr,1,mean)
app <- data.frame(x = app)
app
sd(app$x)/sqrt(40)
sdev <- apply(matr,1,sd)
sdev
app$ll <- app$x - 1.96 *app$sdev/sqrt(40)
app$sdev <- sdev
app$ll <- app$x - 1.96 *app$sdev/sqrt(40)
app$ll <- app$x + 1.96 *app$sdev/sqrt(40)
app$ll <- app$x - 1.96 *app$sdev/sqrt(40)
app$ul <- app$x + 1.96 *app$sdev/sqrt(40)
head(app,10)
coverage <- (app$ll<1/lambda & 1/lambda < app$ul)
coverage
mean(coverage)
hist(mean(coverage))
plot(mean(coverage))
hist(1)
hist(coverage)
ggplot(app, aes(x = x)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..)) +
stat_function(fun=dnorm,colour = "blue",arg = list(mean = 1/lambda,sd = 1/lambda*(1/sqrt(40))))
library(ggplot2)
load(ToothGrowth)
library(ToothGrowth)
ToothGrowth
qplot(len,dose,data= ToothGrowth, color = supp)
library(ggplot2)
qplot(len,dose,data= ToothGrowth, color = supp)
qplot(dose,len,data= ToothGrowth, color = supp)
qplot(dose,len,data= ToothGrowth, color = supp,geom="bocplot")
qplot(dose,len,data= ToothGrowth, color = supp,geom="boxplot")
qplot(dose,len,data= ToothGrowth, fill = supp,geom="boxplot", facet = . ~ supp)
qplot(dose,len,data= ToothGrowth, fill = dose,geom="boxplot", facet = . ~ supp)
qplot(len,data= ToothGrowth, fill = dose,geom="boxplot", facet = . ~ supp)
qplot(len,dose,data= ToothGrowth, fill = dose,geom="boxplot", facet = . ~ supp)
qplot(len,dose,data= ToothGrowth, fill = dose,geom="boxplot")
qplot(len,dose,data= ToothGrowth, color = dose,geom="boxplot", facet = . ~ supp)
qplot(len,dose,data= ToothGrowth, color = dose,geom="boxplot", facet = . ~ supp)
ToothGrowth$len
ToothGrowth$dose
qplot(dose,len,data= ToothGrowth, color = supp,geom="boxplot")
qplot(dose,len,data= ToothGrowth, color = dose,geom="boxplot")
qplot(dose,len,data= ToothGrowth, color = len,geom="boxplot")
qplot(dose,len,data= ToothGrowth, geom="boxplot")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
matrix(c(140,132,138,135,150,151,148,146,135,130),5,2)
?matrix
matrix(c(140,132,138,135,150,151,148,146,135,130),5,2,byrow=TRUE)
x <- as.data.frame(matrix(c(140,132,138,135,150,151,148,146,135,130),5,2,byrow=TRUE))
x
t.test(V1 ~ V2, paired = FALSE, var.equal = FALSE, data = x)
x$V1
t.test(x$V1,x$V2, paired = FALSE, var.equal = FALSE)
t.test(x$V1,x$V2, paired = FALSE, var.equal = TRUE)
t.test(V1 ~ V2, paired = TRUE, var.equal = FALSE, data = x)
t.test(x$V1,x$V2, paired = TRUE, var.equal = TRUE)
qt(0.95)
?df
?qt
qt(0.95,9)
qt(0.975,9)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(fileUrl,destfile="./datos.csv",method="curl")
download.file(fileUrl,destfile="./datos.csv")
datos <- read.xlsx("./datos.csv")
datos <- read.csv("./datos.csv")
nrow(datos[datos$VAL>=1000000])
nrow(datos[datos$VAL>=1000000,])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl,destfile="./datos.xlsx")
library(xlsx)
cameraData <- read.xlsx("datos.xlsx",sheetIndex=1,header=TRUE)
install(xlsx)
package.install(xlsx)
install.package(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
cameraData <- read.xlsx("datos.xlsx",sheetIndex=1,header=TRUE)
cameraData <- read.xlsx("./datos.xlsx",sheetIndex=1,header=TRUE)
cameraData <- read.xlsx("./datos.xlsx")
cameraData <- read.xlsx("./datos.xlsx",sheetIndex=1)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl,destfile="./datos.xml")
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
install.packages("xml")
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(fileUrl)
doc <- htmlTreeParse(fileUrl,useinternal=TRUE)
doc <- htmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(fileUrl,destfile="./datos.csv")
datos <- read.csv("./datos.csv")
library(data.table)
install.packages("DATA.TABLE")
install.packages("data.table")
library(data.table)
DT<-fread("./datos.csv")
str(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
DT<-as.data.table(fread("./datos.csv"))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))*100000
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mcars)
data(mtcars)
lm(mtcars$mpg~mtcars$weight)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xprim <- (x - mean(x))/sd(x)
xprim
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
w <- c(2, 1, 3, 1)
x <- c(0.18, -1.54, 0.42, 0.95)
lm(w~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- x -mean(x)
y <- y - mean (y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x<- x/sd(x)
y<- y /sd(y)
lm(y~x)
myPlot<-function(beta){
y<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=0.02))
library(manipulate)
myPlot<-function(beta){
y<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=0.02))
myPlot<-function(beta){
y<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(-1.6,1.2,step=0.02))
+     y<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
+     x<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
y<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
z<-x*y
sum (z)
sum (z)/sum(x*2)
sum (z)/sum(x*x)
?I
?lm
library(dhiny)
library(shiny)
install.pakages("shiny")
install.packages("shiny")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
z <-lm(y~x)
summary(z)
sqrt(.223)
data(mtcars)
lm(mpg ~weight)
lm(mpg ~weight, data=mtcars)
lm(mpg ~wt, data=mtcars)
fit<-lm(mpg ~wt, data=mtcars)
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
?predict
newData = data.frame(mean(mtcars$wt))
p1<-predict(fit,newdata,interval=("confidence"))
p1<-predict(fit,newData,interval=("confidence"))
p2<-predict(fit,newData,interval=("prediction"))
newdata = data.frame(mean(mtcars$wt))
newdata = data.frame(wt = mean(mtcars$wt))
p1<-predict(fit,newData,interval=("confidence"))
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
plot (fit)
summary(p1)
summary(p2)
xVals<-seq(min(wt),max(wt),by=.01)
xVals<-seq(min(mtcars$wt),max(mtcarrs$wt),by=.01)
xVals<-seq(min(mtcars$wt),max(mtcars$wt),by=.01)
newdata<-data.frame(x=xVals)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
newdata<-data.frame(wt=xVals)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
plot(mpg,wt,frame=FALSE,pch=21,col="black",bg="lightblue",cex=2)
plot(mpg,wt,frame=FALSE,pch=21,col="black",bg="lightblue",cex=2,data=mtcars)
plot(mtcars$mpg,mtcars$wt,frame=FALSE,pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
lines(xVals,p1[,2]);lines(xVals,p1[,3])
p1[,2]
lines(xVals,p1[,2])
plot(fit)
ablines(fit)
abline(fit)
plot(abline(fit))
lines(xVals,p1[,2])
plot(lines(xVals,p1[,2]))
?mtcars
newdata = data.frame(wt = 3))
newdata = data.frame(wt = 3)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
p1
p2
newdata = data.frame(wt = 2)
p1<-predict(fit,newdata,interval=("confidence"))
p2<-predict(fit,newdata,interval=("prediction"))
p1
p2
sumCoef<-summary(fit)$coefficients
sumCoef
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
int <- sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
int*2
summary(fit)
data(mtcars)
summarrry(mtcars)
summary(mtcars)
lm(mpg~ factor(cyl)+wt)
lm(mpg~ factor(cyl)+wt,data=mtcars)
firrrt1<-lm(mpg~ factor(cyl)+wt,data=mtcars)
fit1<-lm(mpg~ factor(cyl)+wt,data=mtcars)
fit2<-lm(mpg~ factor(cyl),data=mtcars)
summary(fit1$coefficientsf)
summary(fit1$coefficients)
summary(fit1$coef)
summary(fit1)
summary(fit2)
fit3<-lm(mpg~ factor(cyl)*wt,data=mtcars)
summary(fit3)
anova(fit1,fit3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 5], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
round(hatvalues(fit)[1 : 5], 3)
round(dfbetas(fit)[1 : 5, 2], 3)
anova(fit1,fit3)
fit3<-lm(mpg~ *wt,data=mtcars)
fit3<-lm(mpg~ wt,data=mtcars)
fit1<-lm(mpg~ wt,data=mtcars)
fit2<-lm(mpg~ wt + am,data=mtcars)
anova(fit1,fit2)
summary(fir1)
summary(fit1)
library(MASS)
step <- stepAIC(fit1, direction="both")
step$anova
step <- stepAIC(fit3, direction="both")
step$anova
step <- stepAIC(fit3, direction="both")
fit<-lm(mpg~ .,data=mtcars)
step <- stepAIC(fit, direction="both")
step$anova
library(relaimpo)
library.install(relaimpo)
install.packages(relaimpo)
install.package(relaimpo)
install.packages("relaimpo")
library(relaimpo)
calc.relimp(fit,type=c("lmg","last","first","pratt"),
rela=TRUE)
boot <- boot.relimp(fit, b = 1000, type = c("lmg",
"last", "first", "pratt"), rank = TRUE,
diff = TRUE, rela = TRUE)
booteval.relimp(boot) # print result
plot(booteval.relimp(boot,sort=TRUE))
step <- stepAIC(fit, direction="both")
fit<-lm(mpg~ .,data=mtcars)
step <- stepAIC(fit, direction="both")
step$anova
step <- stepAIC(fit, direction="both")
plot(step)
summary(step)
setwd("F:/Documentos Carlos/Data Scientist Specialization/Data Products/globe")
runApp()
library(shiny)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
population <- readRDS("population.Rds")
shiny::runApp()
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='elsersinn', token='5CAE524C9DBE8A2F318D771D461E5B7F', secret='QxzA1btibjPIMzMfO3eQP4nMZ6GojZ7aJPZTWqiQ')
library(shinyapps)
shinyapps::deployApp()
T-Virus Casualty Simulator
TVirus Casualty Simulator
Simulator
globes
rpubs.upload.method = "internal"
setwd("F:/Documentos Carlos/Data Scientist Specialization/Data Products/globe")
